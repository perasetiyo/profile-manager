{"version":3,"sources":["app.js"],"names":["App","routes","router","app","use","enableTypes","json","ctx","next","payload","status","message","type","body","port","fn","listen","err","console","log","boot","api"],"mappings":";;;;;;;qjBAAA;;AAIA;;AAEA;;;AALA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;IAEqBA,G;AACnB,eAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAMC,SAAS,yBAAf;AACA,SAAKC,GAAL,GAAW,mBAAX;;AAEA,SAAKA,GAAL,CAASC,GAAT,CAAa,6BAAW;AACtBC,mBAAa,CAAE,MAAF;AADS,KAAX,CAAb;AAGA,SAAKF,GAAL,CAASC,GAAT,CAAa,KAAKE,IAAlB;;AAEA;;AAEA;;AAEAL,WAAOC,MAAP;AACA,SAAKC,GAAL,CAASC,GAAT,CAAaF,OAAOD,MAAP,EAAb;AACD;;;;;4EAEUM,G,EAAKC,I;;;;;AACdD,oBAAID,IAAJ,GAAW,UAACG,OAAD,EAAoC;AAAA,sBAA1BC,MAA0B,uEAAjB,GAAiB;AAAA,sBAAZC,OAAY;;AAC7CJ,sBAAIK,IAAJ,GAAW,kBAAX;AACAL,sBAAIG,MAAJ,GAAaA,MAAb;AACAH,sBAAII,OAAJ,GAAcA,OAAd;AACAJ,sBAAIM,IAAJ,GAAWJ,OAAX;AACD,iBALD;;uBAMMD,M;;;;;;;;;;;;;;;;;;2BAGDM,I,EAAMC,E,EAAI;AACf,WAAKZ,GAAL,CAASa,MAAT,CAAgBF,IAAhB,EAAsB,UAACG,GAAD,EAAS;AAC7B,YAAIF,EAAJ,EAAQ;AACN,iBAAOA,GAAGE,GAAH,CAAP;AACD;AACDC,gBAAQC,GAAR,CAAYF,0BAAwBH,IAApC;AACD,OALD;AAMD;;;;;;kBAnCkBd,G;;;AAsCrB,IAAMoB,OAAO,SAAPA,IAAO,CAACnB,MAAD,EAASa,IAAT,EAAeC,EAAf,EAAsB;AACjC,MAAMM,MAAM,IAAIrB,GAAJ,CAAQC,MAAR,CAAZ;;AAEAoB,MAAIL,MAAJ,CAAWF,IAAX,EAAiBC,EAAjB;AACD,CAJD;;QAMSK,I,GAAAA,I","file":"app.js","sourcesContent":["// module for server\nimport Koa from 'koa';\nimport qs from 'koa-qs';\nimport Router from 'koa-router';\n// import { HttpError } from '../src/Http/Error';\nimport bodyParser from 'koa-bodyparser';\n// import validate from 'koa-validate';\nimport codes from 'builtin-status-codes';\n\nexport default class App {\n  constructor(routes) {\n    const router = new Router();\n    this.app = new Koa();\n\n    this.app.use(bodyParser({\n      enableTypes: [ 'json' ]\n    }));\n    this.app.use(this.json);\n\n    // TODO: Add logger\n\n    // TODO: validate(this.app);\n\n    routes(router);\n    this.app.use(router.routes());\n  }\n\n  async json(ctx, next) {\n    ctx.json = (payload, status = 200, message) => {\n      ctx.type = 'application/json';\n      ctx.status = status;\n      ctx.message = message;\n      ctx.body = payload;\n    };\n    await next();\n  }\n\n  listen(port, fn) {\n    this.app.listen(port, (err) => {\n      if (fn) {\n        return fn(err);\n      }\n      console.log(err || `Server run on ${port}`);\n    })\n  }\n}\n\nconst boot = (routes, port, fn) => {\n  const api = new App(routes);\n\n  api.listen(port, fn);\n}\n\nexport { boot };\n"],"sourceRoot":"/Users/prasetyonugroho/Project/flipbox/profile-manager/lib"}