{"version":3,"sources":["app.js"],"names":["App","routes","router","app","use","enableTypes","formLimit","jsonLimit","json","plain","error","state","allowedMethods","throw","ctx","next","req","method","url","headers","query","params","request","body","process","env","NODE_DEBUG","console","log","JSON","stringify","payload","status","type","code","parseInt","substr","message","internal","errors","NODE_ENV","stack","port","fn","listen","err","boot","server"],"mappings":"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","file":"app.js","sourcesContent":["/* eslint-disable no-console */\n/** @module KirimoApi*/\nimport Koa from 'koa';\nimport qs from 'koa-qs';\nimport Router from 'koa-router';\nimport convert from 'koa-convert';\nimport { HttpError } from './error';\nimport bodyParser from 'koa-bodyparser';\nimport validate from 'koa-validate';\nimport codes from 'builtin-status-codes';\n\n/** Class representing KirimoApi */\nexport default class App {\n    constructor(routes) {\n        const router = new Router();\n        this.app = new Koa();\n        qs(this.app, 'first');\n        this.app.use(bodyParser({\n            enableTypes: [ 'json', 'form' ],\n            formLimit: '1mb',\n            jsonLimit: '1mb'\n        }));\n        this.app.use(this.json);\n        this.app.use(this.plain);\n        this.app.use(this.error);\n\n        convert(validate);\n        validate(this.app);\n\n        this.app.use(this.state);\n\n        // TODO: Add logger\n\n        routes(router);\n        this.app.use(router.routes())\n            .use(router.allowedMethods({ throw: true }));\n\n    }\n\n    async state(ctx, next) {\n        const { method = 'GET', url = '/', headers = {} } = ctx.req,\n            { query = {}, params = {} } = ctx,\n            { body = {} } = ctx.request;\n        ctx.state = {\n            method,\n            url,\n            headers,\n            query,\n            params,\n            body\n        };\n        if (process.env.NODE_DEBUG) {\n            console.log(JSON.stringify(ctx.state));\n        }\n        await next();\n    }\n\n    async plain(ctx, next) {\n        ctx.plain = (payload, status = 200) => {\n            ctx.type = 'text/plain';\n            ctx.status = status;\n            ctx.body = typeof payload === 'string' ? payload : JSON.stringify(payload);\n        };\n\n        await next();\n    }\n\n    async json(ctx, next) {\n        ctx.json = (payload, status = 200) => {\n            ctx.type = 'application/json';\n            ctx.status = status;\n            ctx.body = payload;\n        };\n        await next();\n    }\n\n    async error(ctx, next) {\n        try {\n            await next();\n        } catch (error) {\n            if (!(error instanceof HttpError)) {\n                let code = `${error.code}`;\n                code = parseInt(code.substr(0, 3)) || 500;\n                code = codes[error.code] ? error.code : 500;\n                error.code = code;\n            }\n\n            let { message, internal, errors } = error;\n            message = message || codes[error.code];\n            ctx.json({ message, code: internal || '500001', errors }, error.code);\n\n            if (process.env.NODE_DEBUG && process.env.NODE_ENV !== 'test') {\n                console.log(error.stack);\n            } else if (process.env.NODE_ENV === 'test') {\n                console.log(error.message);\n            }\n        }\n    }\n\n    listen(port, fn) {\n        this.app.listen(port, (err) => {\n            if (fn) {\n                return fn(err);\n            }\n            console.log(err || `~> up! ${port}`);\n        });\n    }\n}\n\nconst boot = (routes, port, fn) => {\n    const server = new App(routes);\n    server.listen(port, fn);\n};\n\nexport { boot };\n"],"sourceRoot":"/home/apas/project/people-manager/lib"}